% A simple script to run standard Brainstorm actions after anatomy and MEG data have been added.
% Brainstorm v3.1 (31-Oct-2012)
%
% Foldes [2012/10]
% UPDATES:
% 2012-11-02 Foldes: For newer version and modular.

% Parameters
% SubjectID = 'NS01';
% Movement = 'Grasp_LT_Imitate';
% Marker_Name = 'Event_1';

SubjectID = 'NC03';
Movement = 'Grasp_RT_Imitate';
Marker_Name = '2';

Flags.head_model_force = 0; % forces recalcualtion of head model
Flags.report = 0;

% Defaults (for Stephen)
Paradigm = 'Neurofeedback';
Base_Path = '/home/foldes/Data/brainstorm_db';

%%
% This is a test comment
subject_path = [Base_Path '/' Paradigm '/data/' SubjectID '_' Movement '/'];
data_path = [subject_path Marker_Name '/'];

% Find all trial files
clear dir_info
dir_info = dir(data_path);
trial_cnt = 0;
FileNamesA = [];
for ifile = 3:length(dir_info)
    if ~isempty(findstr(dir_info(ifile).name,'_trial'))
        trial_cnt = trial_cnt + 1;
        FileNamesA{trial_cnt} = [SubjectID '_' Movement '/' Marker_Name '/' dir_info(ifile).name];        
    end
end


%% Start a new report
if Flags.report
    bst_report('Start', FileNamesA);
end


%% Head Model

% Check for head model existing
clear dir_info
dir_info = dir([subject_path '@default_study']);
head_model_exists = 0;
for ifile = 3:length(dir_info)
    if ~isempty(findstr(dir_info(ifile).name,'headmodel'))
        head_model_exists = 1;
    end
end

% Calculate head model if: it doesn't exist, or if you indicated a force
if (head_model_exists==0) || Flags.head_model_force
    % Process: Compute head model
    sFiles = bst_process(...
        'CallProcess', 'process_headmodel', ...
        FileNamesA, [], ...
        'sourcespace', 1, ...
        'meg', {3, {'<none>', 'Single sphere', 'Overlapping spheres', 'OpenMEEG BEM'}}, ...
        'eeg', {3, {'<none>', '3-shell sphere', 'OpenMEEG BEM'}}, ...
        'openmeeg', struct(...
        'BemFiles', {{}}, ...
        'BemNames', {{'Scalp', 'Skull', 'Brain'}}, ...
        'BemCond', [1, 0.0125, 1], ...
        'BemSelect', [1, 1, 1], ...
        'isAdjoint', 0, ...
        'isAdaptative', 1, ...
        'isSplit', 0, ...
        'SplitLength', 4000));
end


%% Compute noise covariance (Diagonal Only)
% Diagonal is better for smaller data sets.

sFiles = bst_process(...
    'CallProcess', 'process_noisecov', ...
    FileNamesA, [], ...
    'baseline', [-1, -0.001], ...
    'dcoffset', 1, ...
    'method', 2, ...
    'copycond', 0, ...
    'copysubj', 0);


%% Average: Everything
sFiles = bst_process(...
    'CallProcess', 'process_average', ...
    sFiles, [], ...
    'avgtype', 1);

%% Compute sources
sFiles = bst_process(...
    'CallProcess', 'process_inverse', ...
    sFiles, [], ...
    'method', 1, ...
    'wmne', struct(...
         'SourceOrient', {{'loose'}}, ...
         'loose', 0.2, ...
         'SNR', 3, ...
         'pca', 1, ...
         'diagnoise', 0, ...
         'regnoise', 1, ...
         'magreg', 0.1, ...
         'gradreg', 0.1, ...
         'depth', 1, ...
         'weightexp', 0.5, ...
         'weightlimit', 10), ...
    'sensortypes', 'MEG, MEG MAG, MEG GRAD, EEG', ...
    'output', 1);

%% Save and display report
if Flags.report
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
end

